* trying to synchronize apple ical with linux

so, i would like to have something that "plays well" with calfw (which
does a very nice job giving a calendar display i emacs.

** displaying a summary list

it would look like a (sorted-by-date) list of calendar entries, just
the summaries, i think.  but, emacs "invisible text" could hold the
contents of the entries, so that incremental-search would find them.

then, there would be a search function that would present a narrowed
list of entries matching the search.  sort of like mh-e.

as one scrolls the summary list, the calfw view could change, and vice
versa: "tight" versus "loose" coupling.

clicking/returning on one of the entries in the summary list would
definitely get calfw to focus on it.  maybe it would open that
specific entry (or day, i guess, as calfw doesn't seem to support just
opening an entry).

** synching with icloud (?)

** adding/modifying an entry

** things about calfw
*** navigating

maybe hijack 'n' and 'p' for two letter navigation: nd, pd, nw, pw,
nm, pm, ny, py (d==day, w==week, m==month, y==year)

similarly, maybe 'v' for view: d, w, 2, m, y (where 2==2 weeks).
maybe "y" isn't feasible (not offered in calfw
*** expressiveness

calfw doesn't have all the fields one would like with .ics:
#+BEGIN_EXAMPLE
;; This structure defines calendar events.
(defstruct cfw:event
  title       ; event title [string]
  start-date  ; start date of the event [cfw:date]
  start-time  ; start time of the event (optional)
  end-date    ; end date of the event [cfw:date] (optional)
  end-time    ; end of the event (optional)
  description ; event description [string] (optional)
  location    ; location [strting] (optional)
  source      ; [internal] source of the event
  )
#+END_EXAMPLE

(though, at the moment, that seems like not such a big deal.)

** "previous work"

okay.  how do i deal with these?  [[https://github.com/geier?tab=repositories][here's a guy]] likely looking tools.

[[http://computing.physics.harvard.edu/icloud][here]] is how to get the icloud address for ical.  but, it appears that
the security options are "another icloud user" or "public".  and, i'm
not sure what one does for contacts (though in theory that is
carddav).

[[https://discussions.apple.com/thread/3689451?start=0&tstart=0][a discussion]] on apple.  for android, there is [[https://discussions.apple.com/thread/5971237?start=0&tstart=0][something called
smoothsync]] one case use.

i guess: 
1. keep everything in icloud, so works with iphones.
2. move everything to google alternatives.
3. implement a cloud server.

for google, [[https://gitlab.com/goobook/goobook][goobook]] might work.  doesn't seem to have been updated for
about a year.  [[https://www.linux.com/learn/how-sync-android-linux-desktop][some ways]] to synch google with desktop linux.

[[https://github.com/eventable/vobject][vobject]] is a python package.  recent changes, so maybe up to date.
maybe its ics_diff program/module could be coerced into doing
duplicate suppression.

there's a calendarserver project, which is apparently (?) Apple's.
[[https://www.calendarserver.org/PyCalendar.html][py-calendar]] is part of that.  the pip seems to be pycalendar?

[[https://github.com/kiwanami/emacs-calfw][emacs-calfw]] displays calendars.  seems to know how to read ics.  but,
we don't want it re-reading the icloud server over and over again (i
guess that should be manual, or "daVVVV").  it reads my huge backup
file fairly well.

there is an emacs 'vcard' package (which i've installed).  whatever
the goobook (above) interface, but talking to a downloaded vcard
database, might be nice.

according to [[https://www.emacswiki.org/emacs/BbdbExportImportSync][this emacs wiki page]], [[http://asynk.io/][ASynK]]



** playing around

*** tags in my .ics file

#+BEGIN_SRC sh :results verbatim
(sep=""; for i in `grep -v "^ " test.ics | sed 's/:.*$//' | sed 's/;.*$//' | words`; do echo -n "$sep$i"; sep=" "; done; echo) | fold -s
#+END_SRC

#+RESULTS:
: acknowledged action attach attendee begin calscale class created description 
: dtend dtstamp dtstart end exdate geo last-modified location method organizer 
: priority prodid rdate recurrence-id related-to rrule sequence status summary 
: transp trigger tzid tzname tzoffsetfrom tzoffsetto uid url version 
: x-apple-calendar-color x-apple-default-alarm x-apple-structured-location 
: x-apple-travel-advisory-behavior x-apple-travel-start x-wr-alarmuid 
: x-wr-calname x-wr-timezone

which ones shall we care about?
- created
- description
- dtend
- dtstamp
- dtstart
- ?exdate?
- geo
- last-modified
- location
- ?recurrence-id?
- rrule
- ?sequence?
- summary
- url
*** emacs searching

#+BEGIN_SRC emacs-lisp :results output verbatim
  (let ((trial-space-reg '(
                           "[ \t]+"
                           "[ \t]+\\|\t+"
                           "[ \t\n]+\\|\t+\\|\n+"
                           ))
        (trial-patterns '("thisis"
                          "this is"
                          "this\tis"
                          "this	is"
                          "this\nis"
                          "this
is")))
    (princ "\n")
    (dolist (re trial-space-reg)
      (dolist (pat trial-patterns)
        (let ((result (string-match re pat)))
          (princ re)
          (princ " : ")
          (princ pat)
          (princ " : ")
          (princ result)
          (princ "\n")))))

#+END_SRC

#+RESULTS:
#+begin_example
"
[ 	]+ : thisis : nil
[ 	]+ : this is : 4
[ 	]+ : this	is : 4
[ 	]+ : this	is : 4
[ 	]+ : this
is : nil
[ 	]+ : this
is : nil
[ 	]+\\|	+ : thisis : nil
[ 	]+\\|	+ : this is : 4
[ 	]+\\|	+ : this	is : 4
[ 	]+\\|	+ : this	is : 4
[ 	]+\\|	+ : this
is : nil
[ 	]+\\|	+ : this
is : nil
[ 	
]+\\|	+\\|
+ : thisis : nil
[ 	
]+\\|	+\\|
+ : this is : 4
[ 	
]+\\|	+\\|
+ : this	is : 4
[ 	
]+\\|	+\\|
+ : this	is : 4
[ 	
]+\\|	+\\|
+ : this
is : 4
[ 	
]+\\|	+\\|
+ : this
is : 4
"
#+end_example

